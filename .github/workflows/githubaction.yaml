name: ci-cdd
on:
  push:
    branches: [ main ]
    paths-ignore:
      - 'kubernetes'
jobs:
  test:
    name: Unit Testing
    runs-on: ubuntu-latest
    steps:
      - name: checkout repository
        uses: actions/checkout@v4
      - name: install node js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      - name: download dependencies
        run: npm install
      - name: test
        run: npm test 
  lint:
    name: static code analysis
    runs-on: ubuntu-latest
    steps:
      - name: checkout repository
        uses: actions/checkout@v4
      - name: install node js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      - name: download dependencies
        run: npm install

      - name: npm lint
        run: npm run lint
  build:
    name: build
    needs: [test,lint]
    runs-on: ubuntu-latest
    steps:
      - name: checkout repository
        uses: actions/checkout@v4
      - name: install node js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      - name: download dependencies
        run:
          npm install
      - name: build
        run:
          npm run build
      - name: artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-artifact
          path: dist/
  docker:
    name: build and push
    needs: [build]
    runs-on: ubuntu-latest
    env:
      registry: ghcr.io
      image: ${{github.repository}}
    outputs:
      image_tag: ${{steps.set_outputs.outputs.image_tag}}
    steps:
      - name:  checkout repository
        uses: actions/checkout@v4
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifact
          path: dist/
      - name: login guthub container registry
        uses: docker/login-action@v3
        with:
          registry: ${{env.registry}}
          username: ${{github.actor}}
          password: ${{secrets.TOKEN}}

      - name: extract metadata for docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{env.registry}}/${{env.image}}
          tags: |
            type=sha,format=long
            type=ref,event=branch
            latest
      - name: build docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: ${{steps.meta.outputs.tags}}
          labels: ${{ steps.meta.outputs.labels}}
          load: true
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.registry }}/${{ env.image }}:sha-${{ github.sha }}
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
      
      - name: Push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
      
      - name: Set image tag output
        id: set_output
        run: echo "image_tag=$(echo ${{ github.sha }} | cut -c1-7)" >> $GITHUB_OUTPUT

  update-k8s:
    name: Update Kubernetes Deployment
    runs-on: ubuntu-latest
    needs: [docker]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.TOKEN }}
      
      - name: Setup Git config
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
      
      - name: Update Kubernetes deployment file
        env:
          IMAGE_TAG: sha-${{ github.sha }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          REGISTRY: ghcr.io
        run: |
          # Define the new image with tag
          NEW_IMAGE="${REGISTRY}/${GITHUB_REPOSITORY}:${IMAGE_TAG}"
          
          # Update the deployment file directly
          sed -i "s|image: ${REGISTRY}/.*|image: ${NEW_IMAGE}|g" kubernetes/deployment.yaml
          
          # Verify the change
          echo "Updated deployment to use image: ${NEW_IMAGE}"
          grep -A 1 "image:" kubernetes/deployment.yaml
      
      - name: Commit and push changes
        run: |
          git add kubernetes/deployment.yaml
          git commit -m "Update Kubernetes deployment with new image tag: ${{ needs.docker.outputs.image_tag }} [skip ci]" || echo "No changes to commit"
          git push




